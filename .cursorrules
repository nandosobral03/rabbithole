# Wikipedia Graph Explorer - Cursor Rules

## Project Context
This is a Wikipedia Graph Explorer built with Next.js, React, and D3 force graphs. Users can search for Wikipedia articles, visualize them as nodes in a graph, and explore connections by clicking links within articles.

## 5 Core Rules

### 1. Never Run the Dev Server - User Handles It
- The user is always running `bun dev` themselves
- Never propose `run_terminal_cmd` with `bun dev` or similar development server commands
- Focus on code changes and let the user handle the runtime environment
- Only use terminal commands for git operations, package management, or file operations

### 2. Prioritize Graph Visualization Space
- The graph view should always get maximum screen real estate
- Avoid layouts that push or shrink the graph canvas
- Use overlays, floating elements, or absolute positioning instead of taking up graph space
- The graph width should ideally always be `window.innerWidth` for full-screen visualization
- When adding UI elements, prefer floating/overlay designs over sidebars that reduce graph space

### 3. Provide Immediate User Feedback for Async Operations
- Wikipedia API calls can be slow, so always add loading states
- Use visual indicators (spinners, disabled states, color changes) for any user action that triggers network requests
- Set loading state immediately when user clicks, before the async operation starts
- Always clean up loading states in `finally` blocks to handle both success and error cases
- Consider adding loading animations or progress indicators for better UX

### 4. Handle Wikipedia Link Variations Robustly
- Wikipedia links come in multiple formats: `./Article_name`, `/wiki/Article_name`, and full URLs
- Always decode URI components and replace underscores with spaces
- Check for existing nodes/links before making API calls to avoid duplicates
- Handle both the clicked title and the actual title returned by Wikipedia API (they can differ)
- Implement proper error handling for failed Wikipedia API requests

### 5. Maintain Clean UI with Progressive Disclosure
- Use collapsible/expandable interfaces (like the floating search with instructions)
- Hide complex functionality behind simple controls (like the panel resize handle)
- Provide contextual actions (like the expand button only showing when there are connections)
- Use smooth transitions and animations to make interactions feel polished
- Keep the initial interface minimal and reveal features as needed

## Technical Guidelines

### State Management
- Use React hooks appropriately (useState, useCallback, useEffect)
- Manage loading states with Sets for multiple concurrent operations
- Clean up event listeners and timeouts in useEffect cleanup functions

### Graph Interactions
- Handle node clicks, right-clicks, and background clicks appropriately
- Provide visual feedback for expanded nodes vs regular nodes
- Use D3 force simulation parameters for optimal node spacing

### Article Panel
- Use absolute positioning for overlay panels
- Implement resizable and collapsible functionality
- Ensure good reading experience with proper typography and spacing

### Performance
- Use dynamic imports for heavy libraries (like ForceGraph2D)
- Implement proper memoization with useCallback where appropriate
- Avoid unnecessary re-renders by managing dependencies carefully

## Code Style
- Use TypeScript interfaces for all data structures
- Handle async operations with proper try/catch blocks
- Use semantic HTML and accessible UI components
- Follow React best practices for component composition
